#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('node-api:server');
var http = require('http');
var graceful_shutdown = require('../lib/graceful_shutdown/graceful_shutdown')
var logger = require('../lib/logger/logger') 
var connectToDB = require('../lib/database/connect') 

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */




server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

logger.info('Application Started')

connectToDB() 

process.on('SIGINT',()=>{
    logger.fatal('Application Shutdown: SIGINT ') 
    graceful_shutdown(server) 
})

process.on('SIGTERM', ()=>{
    logger.fatal(' Application Shutdown: SIGTERM ') 
    graceful_shutdown( server ) 
})

process.on('uncaughtException',(err)=>{
    logger.fatal(err,' Application Shutdown: UNCAUGHT EXCEPTION ')
    graceful_shutdown(server)
})


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



logger.info(' Application Started ') 

function myErr()
{
  const userId = 'fva232' 
  const childLogger = logger.child({ userId })
  childLogger.trace(' In an anonymous function ') 
}

